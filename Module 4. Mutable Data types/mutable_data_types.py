# -*- coding: utf-8 -*-
"""Mutable Data types

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BvWd_G8JbB3SpHyImoytqLkUxe5t3U9S

# Data Types in Python
In Python, data types can be categorized as mutable and immutable based on whether their values can be changed after they are created.
Mutable
Immutable
1. Mutable
Definition: Mutable data types allow modifications after their creation. You can change, add, or remove elements without creating a new object.
Examples: Lists, Dictionaries, Sets
2. Immutable
Definition: Immutable data types do not allow any modifications after their creation. If you attempt to change them, you need to create a new object.
Examples: Strings, Tuples, Integers

Mutable Data Types
# 1. List
A list is a collection of ordered, changeable and indexed Elements. You can store different types of data in a list.
"""

# Creating a list
my_list = [1, 2, 3, 4, 5]

# Adding an element
my_list.append(6)

# Removing an element
my_list.remove(3)

# Accessing an element
print(my_list[2])  # Output: 4


print(my_list)  # Output: [1, 2, 4, 5, 6]

"""**2. Set**


A set is a collection of unordered, unique items. Sets are useful for storing elements without duplicates.
"""

# Creating a set
my_set = {1, 2, 3, 'apple', 'banana'}

# Adding an element
my_set.add('cherry')

# Removing an element
my_set.remove(2)

# Checking for membership
print('banana' in my_set)  # Output: True

print(my_set)  # Output: {1, 3, 'apple', 'banana', 'cherry'}

"""**3. Dictionary**

A dictionary is a collection of key-value pairs. Each key is unique, and values can be of any data type.
"""

# Creating a dictionary
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

# Adding a key-value pair
my_dict['email'] = 'alice@example.com'

# Removing a key-value pair
del my_dict['age']

# Accessing a value
print(my_dict['name'])  # Output: Alice

print(my_dict)  # Output: {'name': 'Alice', 'city': 'New York', 'email': 'rohan@example.com'}